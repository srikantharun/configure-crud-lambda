# main.tf
terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
    archive = {
      source  = "hashicorp/archive"
      version = "~> 2.0"
    }
    local = {
      source  = "hashicorp/local"
      version = "~> 2.0"
    }
  }
  required_version = ">= 1.0"
}

provider "aws" {
  region = var.aws_region
}

# Create the Lambda function code
resource "local_file" "lambda_code" {
  content = <<EOF
import json
import uuid
from datetime import datetime

# Simple in-memory storage (use DynamoDB for production)
items = {}

def handler(event, context):
    print(f"Event: {json.dumps(event)}")
    
    method = event.get('httpMethod', 'GET')
    path = event.get('path', '/')
    
    # Extract query parameters
    query_params = event.get('queryStringParameters') or {}
    request_param = query_params.get('request', '').lower()
    
    # Extract item ID from path if present
    path_parts = path.strip('/').split('/')
    item_id = path_parts[-1] if len(path_parts) > 1 and path_parts[-1] != 'items' else None
    
    try:
        if method == 'GET':
            if item_id and item_id != 'items':
                # Get single item
                if item_id in items:
                    return response(200, items[item_id])
                else:
                    return response(404, {"error": "Item not found"})
            else:
                # Get all items with optional filtering
                all_items = list(items.values())
                
                # Filter by request parameter if provided
                if request_param:
                    # Filter items where name or description contains the request param
                    filtered_items = [
                        item for item in all_items 
                        if request_param in item.get('name', '').lower() 
                        or request_param in item.get('description', '').lower()
                    ]
                    return response(200, {
                        "items": filtered_items, 
                        "count": len(filtered_items),
                        "filter": request_param
                    })
                
                # Filter by any other query parameters
                if query_params:
                    filtered_items = all_items
                    for key, value in query_params.items():
                        if key != 'request':
                            filtered_items = [
                                item for item in filtered_items
                                if str(item.get(key, '')).lower() == value.lower()
                            ]
                    return response(200, {
                        "items": filtered_items,
                        "count": len(filtered_items),
                        "filters": query_params
                    })
                
                return response(200, {"items": all_items, "count": len(all_items)})
                
        elif method == 'POST':
            # Create new item
            body = json.loads(event.get('body', '{}'))
            new_id = str(uuid.uuid4())
            
            # Support for request parameter to modify creation behavior
            new_item = {
                "id": new_id,
                "name": body.get('name', 'Unnamed'),
                "description": body.get('description', ''),
                "created_at": datetime.now().isoformat(),
                "updated_at": datetime.now().isoformat()
            }
            
            # Add any additional fields from body
            for key, value in body.items():
                if key not in new_item:
                    new_item[key] = value
            
            # Handle special request parameters
            if request_param == 'bulk':
                # Support bulk creation if multiple items in array
                if isinstance(body.get('items'), list):
                    created_items = []
                    for item_data in body['items']:
                        bulk_id = str(uuid.uuid4())
                        bulk_item = {
                            "id": bulk_id,
                            "name": item_data.get('name', 'Unnamed'),
                            "description": item_data.get('description', ''),
                            "created_at": datetime.now().isoformat(),
                            "updated_at": datetime.now().isoformat()
                        }
                        # Add additional fields
                        for k, v in item_data.items():
                            if k not in bulk_item:
                                bulk_item[k] = v
                        items[bulk_id] = bulk_item
                        created_items.append(bulk_item)
                    return response(201, {
                        "message": "Bulk creation successful",
                        "items": created_items,
                        "count": len(created_items)
                    })
            
            items[new_id] = new_item
            return response(201, new_item)
            
        elif method == 'PUT':
            # Update item
            if not item_id or item_id == 'items':
                return response(400, {"error": "Item ID required"})
            if item_id not in items:
                return response(404, {"error": "Item not found"})
                
            body = json.loads(event.get('body', '{}'))
            
            # Update with merge or replace based on request parameter
            if request_param == 'replace':
                # Replace entire item (keeping id and created_at)
                items[item_id] = {
                    "id": item_id,
                    "name": body.get('name', 'Unnamed'),
                    "description": body.get('description', ''),
                    "created_at": items[item_id].get('created_at'),
                    "updated_at": datetime.now().isoformat()
                }
                # Add any additional fields
                for key, value in body.items():
                    if key not in ['id', 'created_at']:
                        items[item_id][key] = value
            else:
                # Default: merge update
                items[item_id].update({
                    "name": body.get('name', items[item_id]['name']),
                    "description": body.get('description', items[item_id]['description']),
                    "updated_at": datetime.now().isoformat()
                })
                # Update any additional fields
                for key, value in body.items():
                    if key not in ['id', 'created_at']:
                        items[item_id][key] = value
            
            return response(200, items[item_id])
            
        elif method == 'DELETE':
            # Delete item
            if not item_id or item_id == 'items':
                # Support bulk delete with request parameter
                if request_param == 'all':
                    count = len(items)
                    items.clear()
                    return response(200, {
                        "message": f"Deleted all items",
                        "count": count
                    })
                return response(400, {"error": "Item ID required"})
            
            if item_id not in items:
                return response(404, {"error": "Item not found"})
                
            deleted_item = items.pop(item_id)
            return response(200, {"message": "Item deleted", "item": deleted_item})
            
        elif method == 'OPTIONS':
            # Handle CORS preflight
            return response(200, {})
            
        else:
            return response(405, {"error": f"Method {method} not allowed"})
            
    except Exception as e:
        print(f"Error: {str(e)}")
        return response(500, {"error": f"Internal server error: {str(e)}"})

def response(status_code, body):
    return {
        'statusCode': status_code,
        'headers': {
            'Content-Type': 'application/json',
            'Access-Control-Allow-Origin': '*',
            'Access-Control-Allow-Methods': 'GET,POST,PUT,DELETE,OPTIONS',
            'Access-Control-Allow-Headers': 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
        },
        'body': json.dumps(body, indent=2)
    }
EOF

  filename = "${path.module}/lambda_function.py"
}

# Create ZIP file for Lambda
data "archive_file" "lambda_zip" {
  type        = "zip"
  source_file = local_file.lambda_code.filename
  output_path = "${path.module}/crud_api.zip"
  depends_on  = [local_file.lambda_code]
}

# IAM role for Lambda
resource "aws_iam_role" "lambda_role" {
  name = "${var.project_name}-lambda-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "lambda.amazonaws.com"
        }
      }
    ]
  })

  tags = var.common_tags
}

# Attach basic execution policy
resource "aws_iam_role_policy_attachment" "lambda_basic" {
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  role       = aws_iam_role.lambda_role.name
}

# Lambda function for CRUD operations
resource "aws_lambda_function" "crud_api" {
  filename         = data.archive_file.lambda_zip.output_path
  function_name    = "${var.project_name}-api"
  role            = aws_iam_role.lambda_role.arn
  handler         = "lambda_function.handler"
  runtime         = var.lambda_runtime
  timeout         = var.lambda_timeout
  source_code_hash = data.archive_file.lambda_zip.output_base64sha256

  environment {
    variables = {
      ENVIRONMENT = var.environment
    }
  }

  tags = var.common_tags
}

# API Gateway
resource "aws_api_gateway_rest_api" "crud_api" {
  name        = "${var.project_name}-api"
  description = "Simple CRUD REST API with Query Parameters"
  
  endpoint_configuration {
    types = ["REGIONAL"]
  }

  tags = var.common_tags
}

# API Gateway Resource for /items
resource "aws_api_gateway_resource" "items" {
  rest_api_id = aws_api_gateway_rest_api.crud_api.id
  parent_id   = aws_api_gateway_rest_api.crud_api.root_resource_id
  path_part   = "items"
}

# API Gateway Resource for /items/{id}
resource "aws_api_gateway_resource" "item_id" {
  rest_api_id = aws_api_gateway_rest_api.crud_api.id
  parent_id   = aws_api_gateway_resource.items.id
  path_part   = "{id}"
}

# Enable CORS for /items
resource "aws_api_gateway_method" "items_options" {
  rest_api_id   = aws_api_gateway_rest_api.crud_api.id
  resource_id   = aws_api_gateway_resource.items.id
  http_method   = "OPTIONS"
  authorization = "NONE"
}

resource "aws_api_gateway_integration" "items_options_integration" {
  rest_api_id = aws_api_gateway_rest_api.crud_api.id
  resource_id = aws_api_gateway_resource.items.id
  http_method = aws_api_gateway_method.items_options.http_method
  type        = "AWS_PROXY"
  integration_http_method = "POST"
  uri         = aws_lambda_function.crud_api.invoke_arn
}

# Enable CORS for /items/{id}
resource "aws_api_gateway_method" "item_id_options" {
  rest_api_id   = aws_api_gateway_rest_api.crud_api.id
  resource_id   = aws_api_gateway_resource.item_id.id
  http_method   = "OPTIONS"
  authorization = "NONE"
}

resource "aws_api_gateway_integration" "item_id_options_integration" {
  rest_api_id = aws_api_gateway_rest_api.crud_api.id
  resource_id = aws_api_gateway_resource.item_id.id
  http_method = aws_api_gateway_method.item_id_options.http_method
  type        = "AWS_PROXY"
  integration_http_method = "POST"
  uri         = aws_lambda_function.crud_api.invoke_arn
}

# Methods for /items (GET, POST)
resource "aws_api_gateway_method" "items_get" {
  rest_api_id   = aws_api_gateway_rest_api.crud_api.id
  resource_id   = aws_api_gateway_resource.items.id
  http_method   = "GET"
  authorization = "NONE"
  request_parameters = {
    "method.request.querystring.request" = false
  }
}

resource "aws_api_gateway_method" "items_post" {
  rest_api_id   = aws_api_gateway_rest_api.crud_api.id
  resource_id   = aws_api_gateway_resource.items.id
  http_method   = "POST"
  authorization = "NONE"
  request_parameters = {
    "method.request.querystring.request" = false
  }
}

# Methods for /items/{id} (GET, PUT, DELETE)
resource "aws_api_gateway_method" "item_get" {
  rest_api_id   = aws_api_gateway_rest_api.crud_api.id
  resource_id   = aws_api_gateway_resource.item_id.id
  http_method   = "GET"
  authorization = "NONE"
}

resource "aws_api_gateway_method" "item_put" {
  rest_api_id   = aws_api_gateway_rest_api.crud_api.id
  resource_id   = aws_api_gateway_resource.item_id.id
  http_method   = "PUT"
  authorization = "NONE"
  request_parameters = {
    "method.request.querystring.request" = false
  }
}

resource "aws_api_gateway_method" "item_delete" {
  rest_api_id   = aws_api_gateway_rest_api.crud_api.id
  resource_id   = aws_api_gateway_resource.item_id.id
  http_method   = "DELETE"
  authorization = "NONE"
  request_parameters = {
    "method.request.querystring.request" = false
  }
}

# Integrations for /items
resource "aws_api_gateway_integration" "items_get_integration" {
  rest_api_id = aws_api_gateway_rest_api.crud_api.id
  resource_id = aws_api_gateway_resource.items.id
  http_method = aws_api_gateway_method.items_get.http_method
  integration_http_method = "POST"
  type        = "AWS_PROXY"
  uri         = aws_lambda_function.crud_api.invoke_arn
}

resource "aws_api_gateway_integration" "items_post_integration" {
  rest_api_id = aws_api_gateway_rest_api.crud_api.id
  resource_id = aws_api_gateway_resource.items.id
  http_method = aws_api_gateway_method.items_post.http_method
  integration_http_method = "POST"
  type        = "AWS_PROXY"
  uri         = aws_lambda_function.crud_api.invoke_arn
}

# Integrations for /items/{id}
resource "aws_api_gateway_integration" "item_get_integration" {
  rest_api_id = aws_api_gateway_rest_api.crud_api.id
  resource_id = aws_api_gateway_resource.item_id.id
  http_method = aws_api_gateway_method.item_get.http_method
  integration_http_method = "POST"
  type        = "AWS_PROXY"
  uri         = aws_lambda_function.crud_api.invoke_arn
}

resource "aws_api_gateway_integration" "item_put_integration" {
  rest_api_id = aws_api_gateway_rest_api.crud_api.id
  resource_id = aws_api_gateway_resource.item_id.id
  http_method = aws_api_gateway_method.item_put.http_method
  integration_http_method = "POST"
  type        = "AWS_PROXY"
  uri         = aws_lambda_function.crud_api.invoke_arn
}

resource "aws_api_gateway_integration" "item_delete_integration" {
  rest_api_id = aws_api_gateway_rest_api.crud_api.id
  resource_id = aws_api_gateway_resource.item_id.id
  http_method = aws_api_gateway_method.item_delete.http_method
  integration_http_method = "POST"
  type        = "AWS_PROXY"
  uri         = aws_lambda_function.crud_api.invoke_arn
}

# Lambda permissions for API Gateway
resource "aws_lambda_permission" "api_gateway" {
  statement_id  = "AllowExecutionFromAPIGateway"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.crud_api.function_name
  principal     = "apigateway.amazonaws.com"
  source_arn    = "${aws_api_gateway_rest_api.crud_api.execution_arn}/*/*"
}

# API Gateway Deployment
resource "aws_api_gateway_deployment" "crud_api" {
  depends_on = [
    aws_api_gateway_integration.items_get_integration,
    aws_api_gateway_integration.items_post_integration,
    aws_api_gateway_integration.item_get_integration,
    aws_api_gateway_integration.item_put_integration,
    aws_api_gateway_integration.item_delete_integration,
    aws_api_gateway_integration.items_options_integration,
    aws_api_gateway_integration.item_id_options_integration,
  ]

  rest_api_id = aws_api_gateway_rest_api.crud_api.id
  stage_name  = var.api_stage_name

  lifecycle {
    create_before_destroy = true
  }
}

# CloudFront Distribution
resource "aws_cloudfront_distribution" "crud_api_cdn" {
  origin {
    domain_name = "${aws_api_gateway_rest_api.crud_api.id}.execute-api.${var.aws_region}.amazonaws.com"
    origin_id   = "APIGateway-${aws_api_gateway_rest_api.crud_api.id}"
    origin_path = "/${var.api_stage_name}"

    custom_origin_config {
      http_port              = 80
      https_port             = 443
      origin_protocol_policy = "https-only"
      origin_ssl_protocols   = ["TLSv1.2"]
    }
  }

  enabled = true
  comment = "${var.project_name} CloudFront Distribution"

  default_cache_behavior {
    allowed_methods  = ["DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT"]
    cached_methods   = ["GET", "HEAD", "OPTIONS"]
    target_origin_id = "APIGateway-${aws_api_gateway_rest_api.crud_api.id}"

    forwarded_values {
      query_string = true
      headers      = ["Authorization", "Content-Type", "X-Forwarded-For"]
      
      cookies {
        forward = "none"
      }
    }

    viewer_protocol_policy = "redirect-to-https"
    min_ttl                = 0
    default_ttl            = 0
    max_ttl                = 86400
    compress               = true
  }

  # Cache behavior for static content (if any)
  ordered_cache_behavior {
    path_pattern     = "/static/*"
    allowed_methods  = ["GET", "HEAD", "OPTIONS"]
    cached_methods   = ["GET", "HEAD"]
    target_origin_id = "APIGateway-${aws_api_gateway_rest_api.crud_api.id}"

    forwarded_values {
      query_string = false
      cookies {
        forward = "none"
      }
    }

    min_ttl                = 0
    default_ttl            = 86400
    max_ttl                = 31536000
    compress               = true
    viewer_protocol_policy = "redirect-to-https"
  }

  price_class = var.cloudfront_price_class

  restrictions {
    geo_restriction {
      restriction_type = "none"
    }
  }

  viewer_certificate {
    cloudfront_default_certificate = true
  }

  tags = var.common_tags
}

# Data sources
data "aws_region" "current" {}
data "aws_caller_identity" "current" {}

# Outputs
output "api_gateway_url" {
  description = "API Gateway URL"
  value       = "https://${aws_api_gateway_rest_api.crud_api.id}.execute-api.${var.aws_region}.amazonaws.com/${var.api_stage_name}"
}

output "cloudfront_url" {
  description = "CloudFront URL"
  value       = "https://${aws_cloudfront_distribution.crud_api_cdn.domain_name}"
}

output "lambda_function_name" {
  description = "Lambda function name"
  value       = aws_lambda_function.crud_api.function_name
}

output "api_gateway_id" {
  description = "API Gateway ID"
  value       = aws_api_gateway_rest_api.crud_api.id
}

output "cloudfront_distribution_id" {
  description = "CloudFront Distribution ID"
  value       = aws_cloudfront_distribution.crud_api_cdn.id
}
